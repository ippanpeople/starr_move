// 设置方块的初始位置
let positionX = 0;
let positionY = 0;
let room_status = "exit";
let connection_status = "connected";

let pod = []


///追加
let webRTCRoomname = "";
let webConenction = false;
let join = null
let leave = null
let room = null

// user account
var username = prompt("usernameを入力：");

// チェック client_key がnullかどうか
if (username === null || username === "") {
  console.log("usernameがnull");
} else {
  const client_list = [];
  const client_num = client_list.length
  const init_instance = {
    event: "init_event",
    username: username,
    room_status: room_status,
    connection_status: connection_status
  };
  // websocket コネクション
  // const ws = new WebSocket('wss://starr_move.rinlink.jp/ws/test')
  const ws = new WebSocket('ws://localhost:8282/ws/test')

  // Listen On WebSocket コネクション　Open
  ws.addEventListener('open', (event) => {
    console.log('>>>>>>WebSocket コネクション　Open<<<<<<');
    ws.send(JSON.stringify(init_instance));

  });

  // Listen On WebSocket Message Receive
  ws.addEventListener('message', (event) => {
    // 解析接收到的数据为JSON格式
    const receivedData = JSON.parse(event.data);
    const resp_event = receivedData['event']
    const receivedUserList = receivedData.user_list;
    const receivedUsername = receivedData.username;
    const receivedX = receivedData.x;
    const receivedY = receivedData.y;
    const receivedRoomStatus = receivedData.room_status;

    if (resp_event == "init_resp_event") {

      console.log(receivedUsername)

      if (receivedUsername == username) {
        // receivedUserList の中にいるすべてのユーザを検索
        for (user in receivedUserList) {
          // 自分かどうかを確認
          if (receivedUserList[user]["username"] != username & receivedUserList[user]["connection_status"] == "connected") {
            console.log("================", receivedUserList[user]["x"])


            // 自分じゃなければ、他人のボロックを生成
            const newBox = document.createElement('div');
            const newBoxId = receivedUserList[user]['username'];
            newBox.setAttribute('id', newBoxId); // 自分のブロックidを設置する
            newBox.classList.add('newBox');
            newBox.style.backgroundColor = 'black';
            newBox.style.left = receivedUserList[user]["x"] * 10 + 'px';
            newBox.style.top = receivedUserList[user]["y"] * 10 + 'px';
            // newBox.style.zIndex = receivedClientList.length * 10;
            newBox.style.zIndex = 10;
            container.appendChild(newBox)

          } else if (receivedData['username'] == username & receivedUserList[user]["username"] == username) {

            const myBox = document.createElement('div');
            const myBoxId = username;
            myBox.setAttribute('id', myBoxId); 
            myBox.classList.add('myBox');
            myBox.style.backgroundColor = 'red';
            myBox.style.left = receivedUserList[user]["x"] * 10 + 'px';
            positionX = receivedUserList[user]["x"]
            myBox.style.top = receivedUserList[user]["y"] * 10 + 'px';
            positionY = receivedUserList[user]["y"]
            myBox.style.zIndex = 20;
            container.appendChild(myBox);
            console.log(receivedUserList);

          }
        }
      } else {
        // 自分じゃなければ、他人のボロックを生成
        const newBox = document.createElement('div');
        const newBoxId = receivedUsername;
        newBox.setAttribute('id', newBoxId); // 自分のブロックidを設置する
        newBox.classList.add('newBox');
        newBox.style.backgroundColor = 'black';
        newBox.style.left = receivedX * 10 + 'px';
        newBox.style.top = receivedY * 10 + 'px';

        // newBox.style.zIndex = receivedClientList.length * 10;

        newBox.style.zIndex = 10;
        container.appendChild(newBox);

      }
    } else if (resp_event == "position_resp_event") {
      console.log(receivedUsername)
      const targetUsername = receivedUsername;
      let index = null;

      for (let i = 0; i < receivedData.user_list.length; i++) {
        const userDict = receivedData.user_list[i];
        if (userDict.username === targetUsername) {
          index = i;
          // break;
        }
        ////////////////////////////　追加　/////////////////////////////
        if(!webConenction){
          console.log(userDict.username +" == " + username)
          if(userDict.username != username) {
            if(userDict.connection_status == "connected"){
              console.log("positionX差" + Math.abs(positionX - userDict.x) + "postionYの差" + Math.abs(positionY - userDict.y))
              if( Math.abs(positionX - userDict.x) < 50  && Math.abs(positionY - userDict.y) < 50 ){
                console.log("50px以下")
                console.log("userDict.webRTCRoomname != webRTCRoomname")
                console.log( userDict.webRTCRoomname )
                console.log(webRTCRoomname)
                console.log(userDict.webRTCRoomname != webRTCRoomname)
                if(userDict.webRTCRoomname != webRTCRoomname || webRTCRoomname == ""){
                  console.log("trueやん！！！！！")

                  if (userDict.webRTCRoomname == ""){
                    // roomnameが存在していなかった場合
                    console.log("roomnameが存在していなかった場合")
                    
                    webRTCRoomname = Math.random().toString(32).substring(2)

                    console.log(webRTCRoomname)
                    webConenction = join()
                    webConenction = true

                  }else{
                    if (webRTCRoomname != "") {
                      leave()
                    }
                    // roomnameが存在していた場合
                    console.log("userDict.webRTCRoomname:" + userDict.webRTCRoomname)
                    webRTCRoomname =  userDict.webRTCRoomname
                    join()
                    webConenction = true
                  }
                }
              }
            }
          }
        }
      }
      webConenction = false

      console.log(receivedData.user_list)
      console.log(receivedData.user_list[index])
      const newBox = document.getElementById(receivedUsername);

      for(users in receivedData.user_list){
        x = users["x"]
        y = user["y"]
        console.log(x)
      
      }

      newBox.style.left = receivedData.user_list[index]["x"] * 10 + 'px';
      newBox.style.top = receivedData.user_list[index]["y"] * 10 + 'px';
    } else if (resp_event == "del_event") {

      console.log(receivedUsername, "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
      console.log(receivedData)
      var element = document.getElementById(receivedUsername);
      element.remove();

    }
  });

  // Listen On WebSocket Error
  ws.addEventListener('error', (event) => {
    console.error('WebSocket　Error が発生:', event);
  });

  function moveMyBox() {
    // ブラックのエレメントを取得
    const myBox = document.getElementById(username);

    myBox.style.left = positionX * 10 + 'px';
    myBox.style.top = positionY * 10 + 'px';

    //　table_areaのぶつかる処理判定
    if (44 < positionX && positionX < 54 && 39 < positionY && positionY < 50) {
      const positionData = {
        event: "position_event",
        username: username,
        x: positionX,
        y: positionY,
        room_status: "entry",
        webRTCRoomname:"aaaa",
        connection_status: connection_status
      };
      ws.send(JSON.stringify(positionData))
    } else {
      const positionData = {
        event: "position_event",
        username: username,
        x: positionX,
        y: positionY,
        room_status: "exit",
        webRTCRoomname:webRTCRoomname,
        connection_status: connection_status
      };
      ws.send(JSON.stringify(positionData))
    }
  }

  document.addEventListener('keydown', (event) => {
    const key = event.key;

    //　tableのぶつかる処理判定
    if (key === 'ArrowUp') {
      if (positionY != 48 | (positionY == 48 & positionX < 47) | (positionY == 48 & positionX > 51)) {
        positionY -= 1;
      }
    } else if (key === 'ArrowDown') {
      if (positionY != 41 | (positionY == 41 & positionX < 47) | (positionY == 41 & positionX > 51)) {
        positionY += 1;
      }
    } else if (key === 'ArrowLeft') {
      if (positionX != 52 | (positionX == 52 & positionY < 42) | (positionX == 52 & positionY > 47)) {
        positionX -= 1;
      }
    } else if (key === 'ArrowRight') {
      if (positionX != 46 | (positionX == 46 & positionY < 42) | (positionX == 46 & positionY > 47)) {
        positionX += 1;
      }
    }

    console.log("X:", positionX, "Y:", positionY)
    requestAnimationFrame(moveMyBox);
  });
}

/////////////////////////////////////////// webrtc //////////////////////////////////////////////////



// import { nowInSec, SkyWayAuthToken, SkyWayContext, SkyWayRoom, SkyWayStreamFactory, uuidV4 } from '@skyway-sdk/room';
const { nowInSec, SkyWayAuthToken, SkyWayContext, SkyWayRoom, SkyWayStreamFactory, uuidV4 } = skyway_room;


const token = new SkyWayAuthToken({
    jti: uuidV4(),
    iat: nowInSec(),
    exp: nowInSec() + 60 * 60 * 24,
    scope: {
      app: {
        id: '9ec557a0-588e-4f96-8bc6-f4cb48a7348b',
        turn: true,
        actions: ['read'],
        channels: [
          {
            id: '*',
            name: '*',
            actions: ['write'],
            members: [
              {
                id: '*',
                name: '*',
                actions: ['write'],
                publication: {
                  actions: ['write'],
                },
                subscription: {
                  actions: ['write'],
                },
              },
            ],
            sfuBots: [
              {
                actions: ['write'],
                forwardings: [
                  {
                    actions: ['write'],
                  },
                ],
              },
            ],
          },
        ],
      },
    },
  }).encode('21ANxJMdd+ERCqU/K7UO5UHQtkWOlVcvy2oHmwsueZM=');
  (async () => {
    console.log("async")
    const localVideo = document.getElementById('local-video');
    const buttonArea = document.getElementById('button-area');
    const remoteMediaArea = document.getElementById('remote-media-area');
    const roomNameInput = document.getElementById('room-name');
    
    const myId = document.getElementById('my-id');
    const joinButton = document.getElementById('join');
  
    const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();
    video.attach(localVideo);
    await localVideo.play();

    join = async () => {
        // roomName = Math.random().toString(32).substring(2)
        // roomName = "aa"
        roomName = webRTCRoomname
        console.log(roomName)


        if (roomName === '' || roomName === null) return false;

        let context = await SkyWayContext.Create(token);
        console.log("aaaa")

        room = await SkyWayRoom.FindOrCreate(context, {
            type: 'sfu',
            name: roomName,
        });

        const me = await room.join();

        myId.textContent = me.id;

        await me.publish(audio);
        await me.publish(video);

        const subscribeAndAttach = (publication) => {
            if (publication.publisher.id === me.id) return;

            const subscribeButton = document.createElement('button');
            subscribeButton.textContent = `${publication.publisher.id}: ${publication.contentType}`;
            buttonArea.appendChild(subscribeButton);

            subscribeButton.onclick = async () => {
                const { stream } = await me.subscribe(publication.id);

                let newMedia;
                switch (stream.track.kind) {
                case 'video':
                    newMedia = document.createElement('video');
                    newMedia.playsInline = true;
                    newMedia.autoplay = true;
                    break;
                case 'audio':
                    newMedia = document.createElement('audio');
                    newMedia.controls = true;
                    newMedia.autoplay = true;
                    break;
                default:
                    return;
                }
                stream.attach(newMedia);
                remoteMediaArea.appendChild(newMedia);
            };
        };
        console.log("aaaa")

        room.publications.forEach(subscribeAndAttach);
        room.onStreamPublished.add((e) => subscribeAndAttach(e.publication));
        return true
    };
    leave = async () => {
      room.close()
    }

    // if(true){
    //     console.log("join")
    //     join()
    // }

  })();













//////////////////////////////////////////////////////////////////////////////////////

// import { nowInSec, SkyWayAuthToken, SkyWayContext, SkyWayRoom, SkyWayStreamFactory, uuidV4 } from '@skyway-sdk/room';
// const { nowInSec, SkyWayAuthToken, SkyWayContext, SkyWayRoom, SkyWayStreamFactory, uuidV4 } = skyway_room;

// const token = new SkyWayAuthToken({
//     jti: uuidV4(),
//     iat: nowInSec(),
//     exp: nowInSec() + 60 * 60 * 24,
//     scope: {
//       app: {
//         id: '9ec557a0-588e-4f96-8bc6-f4cb48a7348b',
//         turn: true,
//         actions: ['read'],
//         channels: [
//           {
//             id: '*',
//             name: '*',
//             actions: ['write'],
//             members: [
//               {
//                 id: '*',
//                 name: '*',
//                 actions: ['write'],
//                 publication: {
//                   actions: ['write'],
//                 },
//                 subscription: {
//                   actions: ['write'],
//                 },
//               },
//             ],
//             sfuBots: [
//               {
//                 actions: ['write'],
//                 forwardings: [
//                   {
//                     actions: ['write'],
//                   },
//                 ],
//               },
//             ],
//           },
//         ],
//       },
//     },
//   }).encode('21ANxJMdd+ERCqU/K7UO5UHQtkWOlVcvy2oHmwsueZM=');
//   const localVideo = document.getElementById('local-video');
//   const buttonArea = document.getElementById('button-area');
//   const remoteMediaArea = document.getElementById('remote-media-area');
//   const roomnameInput = document.getElementById('room-name');
  
//   const myId = document.getElementById('my-id');
//   const joinButton = document.getElementById('join');

//  (async  ()  => {
//     console.log("async")
    

//     video.attach(localVideo);
//     localVideo.play();


//     // if(webConenction){
//     //     console.log("join")
//     //     join(roomname)
//     // }

//   })();

//   async function join(roomname) {
//     const { audio, video } =  SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();

//     console.log("joinstart")
//     console.log("roomname" + roomname)

//     // roomname = Math.random().toString(32).substring(2)
//     if (roomname === '') return;

//     const context = await SkyWayContext.Create(token);
//     console.log("aaaa")

//     const room = await SkyWayRoom.FindOrCreate(context, {
//         type: 'sfu',
//         name: roomname,
//     });

//     const me = await room.join();

//     myId.textContent = me.id;

//     await me.publish(audio);
//     await me.publish(video);

//     const subscribeAndAttach = (publication) => {
//         if (publication.publisher.id === me.id) return;

//         const subscribeButton = document.createElement('button');
//         subscribeButton.textContent = `${publication.publisher.id}: ${publication.contentType}`;
//         buttonArea.appendChild(subscribeButton);

//         subscribeButton.onclick = async () => {
//             const { stream } = await me.subscribe(publication.id);

//             let newMedia;
//             switch (stream.track.kind) {
//             case 'video':
//                 newMedia = document.createElement('video');
//                 newMedia.playsInline = true;
//                 newMedia.autoplay = true;
//                 break;
//             case 'audio':
//                 newMedia = document.createElement('audio');
//                 newMedia.controls = true;
//                 newMedia.autoplay = true;
//                 break;
//             default:
//                 return;
//             }
//             stream.attach(newMedia);
//             remoteMediaArea.appendChild(newMedia);
//         };
//     };

//     room.publications.forEach(subscribeAndAttach);
//     room.onStreamPublished.add((e) => subscribeAndAttach(e.publication));
// };


